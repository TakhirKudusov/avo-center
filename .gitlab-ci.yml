stages:
  - build
  - deploy

build: 
  stage: build
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: docker:19.03.1-dind
  services:
    - docker:19.03.12-dind
  script:
    - cat key.json | docker login --username json_key --password-stdin cr.yandex
    - docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t cr.yandex/$DEV_CONTAINER_REGISTRY_ID/token-site:gitlab-$CI_COMMIT_SHORT_SHA .
  only:
   - merge_requests

build-production:
  stage: build
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  image: docker:19.03.1-dind
  services:
    - docker:19.03.12-dind
  script:
    - cat key.json | docker login --username json_key --password-stdin cr.yandex
    - docker build --build-arg NPM_TOKEN=${NPM_TOKEN} -t cr.yandex/$CONTAINER_REGISTRY_ID/token-site:gitlab-$CI_COMMIT_SHORT_SHA .
    - docker push cr.yandex/$CONTAINER_REGISTRY_ID/token-site:gitlab-$CI_COMMIT_SHORT_SHA
  only:
    - main
      
deploy-production:
  stage: deploy
  variables:
    CLOUDSDK_CONTAINER_CLUSTER: "avo-kube"
    CLOUDSDK_COMPUTE_ZONE: "ru-central1-a"
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - kubectl config set-cluster k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=k8s --user=admin
    - kubectl config use-context default
    # CONTAINER REGISTRY CONFIGURATION
    - sed -i "s/__CONTAINER_REGISTRY_ID__/$CONTAINER_REGISTRY_ID/" k8s.yaml
    - sed -i "s/__VERSION__/gitlab-$CI_COMMIT_SHORT_SHA/" k8s.yaml
     # ENV MODE
    - sed -i "s/__ENV_MODE__/production/" k8s.yaml
     # OTHER KUBERNETES CONFIGURATIONS
    - sed -i "s/__NAMESPACE__/prod/" k8s.yaml
    - kubectl apply -f k8s.yaml
  only:
    - main
